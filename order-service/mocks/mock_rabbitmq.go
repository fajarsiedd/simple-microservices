// Code generated by MockGen. DO NOT EDIT.
// Source: messaging/rabbitmq.go
//
// Generated by this command:
//
//	mockgen -source=messaging/rabbitmq.go -destination=mocks/mock_rabbitmq.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	amqp091 "github.com/rabbitmq/amqp091-go"
	gomock "go.uber.org/mock/gomock"
)

// MockMessagingService is a mock of MessagingService interface.
type MockMessagingService struct {
	ctrl     *gomock.Controller
	recorder *MockMessagingServiceMockRecorder
}

// MockMessagingServiceMockRecorder is the mock recorder for MockMessagingService.
type MockMessagingServiceMockRecorder struct {
	mock *MockMessagingService
}

// NewMockMessagingService creates a new mock instance.
func NewMockMessagingService(ctrl *gomock.Controller) *MockMessagingService {
	mock := &MockMessagingService{ctrl: ctrl}
	mock.recorder = &MockMessagingServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessagingService) EXPECT() *MockMessagingServiceMockRecorder {
	return m.recorder
}

// ConnectRabbitMQ mocks base method.
func (m *MockMessagingService) ConnectRabbitMQ() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConnectRabbitMQ")
	ret0, _ := ret[0].(error)
	return ret0
}

// ConnectRabbitMQ indicates an expected call of ConnectRabbitMQ.
func (mr *MockMessagingServiceMockRecorder) ConnectRabbitMQ() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnectRabbitMQ", reflect.TypeOf((*MockMessagingService)(nil).ConnectRabbitMQ))
}

// Consume mocks base method.
func (m *MockMessagingService) Consume(queueName, routingKey string) (<-chan amqp091.Delivery, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Consume", queueName, routingKey)
	ret0, _ := ret[0].(<-chan amqp091.Delivery)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Consume indicates an expected call of Consume.
func (mr *MockMessagingServiceMockRecorder) Consume(queueName, routingKey any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Consume", reflect.TypeOf((*MockMessagingService)(nil).Consume), queueName, routingKey)
}

// GetChannel mocks base method.
func (m *MockMessagingService) GetChannel() (*amqp091.Channel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChannel")
	ret0, _ := ret[0].(*amqp091.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChannel indicates an expected call of GetChannel.
func (mr *MockMessagingServiceMockRecorder) GetChannel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChannel", reflect.TypeOf((*MockMessagingService)(nil).GetChannel))
}

// PublishEvent mocks base method.
func (m *MockMessagingService) PublishEvent(exchangeName, routingKey string, body []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishEvent", exchangeName, routingKey, body)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishEvent indicates an expected call of PublishEvent.
func (mr *MockMessagingServiceMockRecorder) PublishEvent(exchangeName, routingKey, body any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishEvent", reflect.TypeOf((*MockMessagingService)(nil).PublishEvent), exchangeName, routingKey, body)
}

// SetupFailedQueue mocks base method.
func (m *MockMessagingService) SetupFailedQueue() (<-chan amqp091.Delivery, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetupFailedQueue")
	ret0, _ := ret[0].(<-chan amqp091.Delivery)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetupFailedQueue indicates an expected call of SetupFailedQueue.
func (mr *MockMessagingServiceMockRecorder) SetupFailedQueue() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetupFailedQueue", reflect.TypeOf((*MockMessagingService)(nil).SetupFailedQueue))
}
